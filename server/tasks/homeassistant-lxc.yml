---
# Install Home Assistant Supervised in a LXC container
- name: Setup Home Assistant Supervised in LXC container
  become: true
  block:
    - name: Check existing LXC containers
      ansible.builtin.command: lxc-ls
      register: lxc_containers
      changed_when: false

    - name: Check if Home Assistant LXC container is running
      ansible.builtin.command: "lxc-info -n {{ homeassistant_lxclxc_container_name }}"
      register: container_status
      changed_when: false
      failed_when: false

    - name: Set container running fact
      ansible.builtin.set_fact:
        is_container_running: "{{ 'State: RUNNING' in container_status.stdout }}"

    - name: Create Home Assistant LXC Container
      ansible.builtin.shell: >
        lxc-create -n {{ homeassistant_lxclxc_container_name }} -t download --
        --dist debian --release bookworm --arch {{ homeassistant_lxcarch }}
      when: homeassistant_lxclxc_container_name not in lxc_containers.stdout_lines and not is_container_running

    - name: Configure LXC container
      ansible.builtin.copy:
        dest: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/config"
        owner: root
        group: root
        mode: "0644"
        content: |
          # Container specific configuration
          lxc.include = /usr/share/lxc/config/debian.common.conf
          lxc.rootfs.path = dir:/home/lxc/home-assistant/rootfs
          lxc.uts.name = home-assistant

          # Privileged container for Docker
          lxc.apparmor.profile = unconfined
          lxc.cgroup.devices.allow = a
          lxc.cap.drop =
          lxc.mount.auto = proc:mixed sys:mixed cgroup:mixed

          # Network configuration
          lxc.net.0.type = veth
          lxc.net.0.link = merkez-br
          lxc.net.0.flags = up
          lxc.net.0.ipv4.address = {{ homeassistant_lxcnet.ip }}/{{ homeassistant_lxcnet.prefix_length}}
          lxc.net.0.ipv4.gateway = {{ homeassistant_lxcnet.gateway }}

          # Console configuration
          lxc.tty.max = 0
          lxc.tty.dir = none
          lxc.console.path = none

          # Ensure procfs is mounted correctly
          lxc.autodev = 1

          # Required for Docker/Supervisor
          lxc.mount.entry = /dev/fuse dev/fuse none bind,optional,create=file 0 0

    - name: Ensure kernel parameters are properly set
      ansible.builtin.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      with_items:
        - { key: 'kernel.unprivileged_userns_clone', value: '1' }
        - { key: 'kernel.dmesg_restrict', value: '0' }
        - { key: 'net.ipv4.ip_forward', value: '1' }

    - name: Ensure network configuration directory exists
      ansible.builtin.file:
        path: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/etc/network"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Configure static IP in systemd network config
      become: true
      copy:
        dest: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/etc/systemd/network/20-static.network"
        content: |
          [Match]
          Name=eth0*

          [Network]
          Address={{ homeassistant_lxcnet.ip }}/{{ homeassistant_lxcnet.prefix_length}}
          Gateway={{ homeassistant_lxcnet.gateway }}
          DNS={{ network.dns }}

    - name: Configure LXC container autostart
      ansible.builtin.template:
        src: templates/lxc-container.service.j2
        dest: "/etc/systemd/system/lxc-{{ homeassistant_lxclxc_container_name }}.service"
        owner: root
        group: root
        mode: '0644'
      register: service_file

    - name: Create home assistant configuration directory
      ansible.builtin.file:
        path: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/config"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Configure reverse proxy
      ansible.builtin.template:
        src: templates/ha.config.j2
        dest: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/config/configuration.yaml"
        owner: root
        group: root
        mode: '0644'
      register: http_config

    - name: Reload systemd configuration
      ansible.builtin.systemd:
        daemon_reload: yes
      when: service_file.changed

    - name: Enable and start LXC container service
      ansible.builtin.systemd:
        name: "lxc-{{ homeassistant_lxclxc_container_name }}.service"
        enabled: yes
        state: started

####################### NETWORKING ##########################################################################################################################################
    - name: Setup Home Assistant Networking
      become: true
      block:
        - name: Install NetworkManager package
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
              apt-get update
              apt-get install -y \
                dbus \
                systemd-journal-remote \
                network-manager \
                systemd-resolved \
                systemd-timesyncd \
            '
          register: nm_install
          changed_when: nm_install.rc == 0

        
        - name: Disable systemd-networkd
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "
              systemctl stop systemd-networkd
              systemctl disable systemd-networkd
              systemctl mask systemd-networkd
            "
          register: disable_systemd_networking
          changed_when: disable_systemd_networking.rc == 0

        - name: Stop NetworkManager clear config
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
              # Stop NetworkManager
              systemctl stop NetworkManager
              
              # Clean up any existing connections
              rm -f /etc/NetworkManager/system-connections/*
            '
          register: clear_networkmanager_config

        - name: Configure NetworkManager eth0 connection
          ansible.builtin.template:
            src: templates/eth0-static-connection.config.j2
            dest: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/etc/NetworkManager/system-connections/eth0.nmconnection"
            owner: root
            group: root
            mode: '0600'
          register: eth0_connection_config

        - name: Configure NetworkManager connectivity
          ansible.builtin.template:
            src: 20-connectivity.config.j2
            dest: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/etc/NetworkManager/conf.d/20-connectivity.conf"
            owner: root
            group: root
            mode: '0644'
          register: connectivity_config
        
        - name: Configure NetworkManager
          ansible.builtin.template:
            src: NetworkManager.config.j2
            dest: "{{ lxc.path }}/{{ homeassistant_lxclxc_container_name }}/rootfs/etc/NetworkManager/NetworkManager.conf"
            owner: root
            group: root
            mode: '0644'
          register: networkmanager_config
        
        - name: Start NetworkManager
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
              # Start NetworkManager
              systemctl start NetworkManager
            '
          register: networkmanager_started

        - name: Get current eth0 interface name
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "ip -o link | grep -E 'eth0(@|$)' | awk -F': ' '{print \$2}' | cut -d@ -f1"
          register: interface_name
          changed_when: false

        - name: Set interface fact
          ansible.builtin.set_fact:
            eth0_interface: "{{ interface_name.stdout | trim }}"

        - name: Check if eth0 connection exists
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "nmcli con show | grep -q 'eth0' && echo 'exists' || echo 'not_exists'"
          register: eth0_connection_exists
          changed_when: false

        - name: Create eth0 connection if it doesn't exist
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "nmcli con add type ethernet con-name eth0-static ifname {{ eth0_interface }} && nmcli con modify eth0-static connection.autoconnect yes && nmcli connection modify eth0-static connection.autoconnect-priority 100"
          when: eth0_connection_exists.stdout == 'not_exists'

        - name: Update eth0 connection if it exists
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "nmcli con modify eth0-static connection.interface-name {{ eth0_interface }}"
          when: eth0_connection_exists.stdout == 'exists'

        - name: Ensure eth0 connection is up
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "nmcli con up eth0-static || true"
          register: connection_up
          changed_when: "'successfully activated' in connection_up.stdout"


        - name: Restart NetworkManager
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
              nmcli con down eth0-static
              systemctl restart NetworkManager
              nmcli con up eth0-static
            '
          register: nm_restart
          changed_when: nm_restart.rc == 0

        - name: Check NetworkManager connectivity status
          ansible.builtin.shell: |
            lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "nmcli networking connectivity"
          register: nm_connectivity_status
          changed_when: false

#################################################################################################################################################################

    # - name: Install required dependencies in container
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "
    #     apt-get update && \
    #     apt-get install -y --no-install-recommends apt-utils && \
    #     apt-get install -y  apparmor avahi-daemon curl jq libglib2.0-bin software-properties-common udisks2"
    #   register: install_result
    #   changed_when: "'0 upgraded, 0 newly installed' not in install_result.stdout"

    # - name: Wait for container to be ready
    #   ansible.builtin.command: lxc-attach -n  {{ homeassistant_lxclxc_container_name }} -- systemctl is-system-running
    #   register: system_ready
    #   until: system_ready.rc == 0 or "degraded" in system_ready.stdout
    #   retries: 3
    #   delay: 2
    #   changed_when: false
    #   failed_when: false

    # - name: Install Home Assistant supervised prerequisites
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
    #       apt-get update &&
    #       apt-get install -y \
    #         bluez \
    #         cifs-utils \
    #         iproute2 \
    #         lsb-release \
    #         nfs-common \
    #         wget'
    #   register: prereq_result

    # - name: Add Docker repository
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
    #       curl -fsSL https://download.docker.com/linux/{{ homeassistant_lxcdist }}/gpg | apt-key add - &&
    #       add-apt-repository -y "deb [arch={{ homeassistant_lxcarch }}] https://download.docker.com/linux/{{ homeassistant_lxcdist }} {{ homeassistant_lxcrelease }} stable"'
    #   register: docker_repo_result
    #   changed_when: docker_repo_result.rc == 0

    # - name: Install Docker
    #   ansible.builtin.command: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
    #       apt-get update &&
    #       apt-get install -y docker-ce docker-ce-cli containerd.io'
    #   register: docker_install_result
    #   changed_when: docker_install_result.rc == 0

    # - name: Download and install OS Agent
    #   ansible.builtin.command: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
    #       curl -Lo /tmp/os-agent.deb https://github.com/home-assistant/os-agent/releases/download/{{ homeassistant_lxcos_agent_version }}/os-agent_{{ homeassistant_lxcos_agent_version }}_linux_{{ homeassistant_lxcos_agent_arch }}.deb
    #       apt-get install -y /tmp/os-agent.deb
    #       rm /tmp/os-agent.deb
    #     '
    #   register: ha_install_result
    #   changed_when: ha_install_result.rc == 0

    # - name: Download and install Home Assistant supervised installer
    #   ansible.builtin.command: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c '
    #       curl -Lo /tmp/homeassistant-supervised.deb https://github.com/home-assistant/supervised-installer/releases/latest/download/homeassistant-supervised.deb
    #       apt-get install -y /tmp/homeassistant-supervised.deb
    #       rm /tmp/homeassistant-supervised.deb
    #     '
    #   register: ha_install_result
    #   changed_when: ha_install_result.rc == 0

    # - name: Check Home Assistant installation
    #   ansible.builtin.command: >
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- systemctl status hassio-supervisor
    #   register: ha_status
    #   changed_when: false
    #   failed_when: false

    # - name: Restart Home Assistant supervisor
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "systemctl restart hassio-supervisor && sleep 3"
    #   register: supervisor_restart
    #   changed_when: supervisor_restart.rc == 0

    # - name: Check if supervisor API is available
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "
    #       for i in {1..5}; do
    #         if curl -s --connect-timeout 2 http://supervisor/ > /dev/null; then
    #           echo 'Supervisor API is available'
    #           break
    #         else
    #           echo 'Waiting for supervisor API (attempt $i/5)...'
    #           sleep 3
    #         fi
    #       done
    #     "
    #   register: supervisor_api_check
    #   changed_when: false

    # - name: Reload Home Assistant network
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "ha network reload"
    #   register: ha_network_reload
    #   changed_when: ha_network_reload.rc == 0
    #   failed_when: false

    # # - name: Try alternative approaches if network reload failed
    # #   ansible.builtin.shell: |
    # #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "
    # #       # Try to restart the OS agent
    # #       echo 'Restarting OS agent...'
    # #       systemctl restart os-agent
    # #       sleep 2
          
    # #       # Alternative approach - restart docker network
    # #       echo 'Trying alternative approach - restarting docker...'
    # #       systemctl restart docker
    # #       sleep 5
          
    # #       # Restart supervisor again
    # #       echo 'Restarting supervisor again...'
    # #       systemctl restart hassio-supervisor
          
    # #       # Try network reload one more time
    # #       echo 'Trying network reload again...'
    # #       ha network reload || true
    # #     "
    # #   when: ha_network_reload.rc != 0
    # #   register: alternative_fixes
    # #   changed_when: alternative_fixes.rc == 0

    # - name: Check Home Assistant network status
    #   ansible.builtin.shell: |
    #     lxc-attach -n {{ homeassistant_lxclxc_container_name }} -- bash -c "ha network info || echo 'Could not get network info from ha command'"
    #   register: ha_network_status
    #   changed_when: false
    #   failed_when: false

    # # - name: Wait for Home Assistant to fully start
    # #   ansible.builtin.pause:
    # #     seconds: 20
    # #   when: ha_install_result.changed or supervisor_restart.changed

    # - name: Home Assistant installation summary
    #   ansible.builtin.debug:
    #     msg: |
    #       Home Assistant Supervised installation completed.
    #       Container name: {{ homeassistant_lxclxc_container_name }}
    #       Container IP: {{ homeassistant_lxcnet.ip }}
    #       Access Home Assistant at http://{{ homeassistant_lxcnet.ip }}:8123
    #       Home Assistant Supervised installation completed.
    #       Container name: {{ homeassistant_lxclxc_container_name }}
    #       Container IP: {{ homeassistant_lxcnet.ip }}
    #       Access Home Assistant at http://{{ homeassistant_lxcnet.ip }}:8123
